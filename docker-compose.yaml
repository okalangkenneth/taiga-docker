version: '3.8'

networks:
  taiga_network:
    driver: bridge

services:
  postgres:
    image: postgres:13
    networks:
      - taiga_network
    environment:
      POSTGRES_DB: taiga
      POSTGRES_USER: taiga
      POSTGRES_PASSWORD: taigapassword
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U taiga"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # redis:
  #   image: redis:6
  #   networks:
  #     - taiga_network
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #     start_period: 10s

  # taiga-back:
  #   build:
  #     context: ./taiga-back-custom
  #     dockerfile: Dockerfile
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   networks:
  #     - taiga_network
  #   environment:
  #     POSTGRES_DB: taiga
  #     POSTGRES_USER: taiga
  #     POSTGRES_PASSWORD: taigapassword
  #     POSTGRES_HOST: postgres
  #     DJANGO_SETTINGS_MODULE: settings.config
  #     TAIGA_SECRET_KEY: j5_e4atjh#mo)f9olk@i!jkk=7e5!$b(yd!v6*0rx$7bq(9lwl
  #     TAIGA_SITES_DOMAIN: ${TAIGA_DOMAIN}
  #     TAIGA_SITES_SCHEME: http
  #     TAIGA_REDIS_HOST: redis
  #   volumes:
  #     - taiga_back_media:/taiga-back/media
  #     - taiga_back_static:/taiga-back/static

  # taiga-front:
  #   image: taigaio/taiga-front:6.7.0
  #   depends_on:
  #     - taiga-back
  #   networks:
  #     - taiga_network
  #   environment:
  #     TAIGA_URL: http://${TAIGA_DOMAIN}
  #     TAIGA_WEBSOCKETS_URL: ws://${TAIGA_DOMAIN}/events
  #     TAIGA_API_URL: http://${TAIGA_DOMAIN}/api/v1/

  # nginx:
  #   image: nginx:alpine
  #   depends_on:
  #     - taiga-front
  #     - taiga-back
  #   networks:
  #     - taiga_network
  #   labels:
  #     coolify.default: "true"
  #     coolify.managed: "true"
  #   command: >
  #     /bin/sh -c "rm -f /etc/nginx/conf.d/default.conf &&
  #     echo 'server {
  #         listen 80;
  #         server_name _;
          
  #         # Frontend
  #         location / {
  #             proxy_pass http://taiga-front:80;
  #             proxy_set_header Host \\$$http_host;
  #             proxy_set_header X-Real-IP \\$$remote_addr;
  #             proxy_set_header X-Forwarded-For \\$$proxy_add_x_forwarded_for;
  #             proxy_set_header X-Forwarded-Proto \\$$scheme;
  #         }
          
  #         # Backend API
  #         location /api {
  #             proxy_pass http://taiga-back:8000/api;
  #             proxy_set_header Host \\$$http_host;
  #             proxy_set_header X-Real-IP \\$$remote_addr;
  #             proxy_set_header X-Forwarded-For \\$$proxy_add_x_forwarded_for;
  #             proxy_set_header X-Forwarded-Proto \\$$scheme;
  #         }
          
  #         # Admin
  #         location /admin {
  #             proxy_pass http://taiga-back:8000/admin;
  #             proxy_set_header Host \\$$http_host;
  #             proxy_set_header X-Real-IP \\$$remote_addr;
  #             proxy_set_header X-Forwarded-For \\$$proxy_add_x_forwarded_for;
  #             proxy_set_header X-Forwarded-Proto \\$$scheme;
  #         }
          
  #         # Static files
  #         location /static {
  #             proxy_pass http://taiga-back:8000/static;
  #             proxy_set_header Host \\$$http_host;
  #             proxy_set_header X-Real-IP \\$$remote_addr;
  #             proxy_set_header X-Forwarded-For \\$$proxy_add_x_forwarded_for;
  #             proxy_set_header X-Forwarded-Proto \\$$scheme;
  #         }
          
  #         # Media files
  #         location /media {
  #             proxy_pass http://taiga-back:8000/media;
  #             proxy_set_header Host \\$$http_host;
  #             proxy_set_header X-Real-IP \\$$remote_addr;
  #             proxy_set_header X-Forwarded-For \\$$proxy_add_x_forwarded_for;
  #             proxy_set_header X-Forwarded-Proto \\$$scheme;
  #         }
  #     }' > /etc/nginx/conf.d/taiga.conf && nginx -g 'daemon off;'"

volumes:
  postgres_data:
  taiga_back_media:
  taiga_back_static:
